"""
–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è Replit
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º —Å –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
"""

import os
from datetime import datetime, timedelta
from typing import Optional, List, Tuple, Dict, Any
import pytz
from dotenv import load_dotenv
import time
import requests
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_KEY = os.getenv('SUPABASE_KEY')

if not all([SUPABASE_URL, SUPABASE_KEY]):
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    print("üìù –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ .env —Ñ–∞–π–ª–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:")
    print("   ‚Ä¢ SUPABASE_URL")
    print("   ‚Ä¢ SUPABASE_KEY")
    exit(1)

# –ü—Ä–æ—Å—Ç–æ–π HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è Supabase REST API
class SimpleSupabaseClient:
    def __init__(self, url: str, key: str):
        self.url = url.rstrip('/')
        self.key = key
        self.headers = {
            'apikey': key,
            'Authorization': f'Bearer {key}',
            'Content-Type': 'application/json'
        }
    
    def table(self, table_name: str):
        return SimpleSupabaseTable(self.url, self.headers, table_name)

class SimpleSupabaseTable:
    def __init__(self, base_url: str, headers: dict, table_name: str):
        self.base_url = base_url
        self.headers = headers
        self.table_name = table_name
        self.url = f"{base_url}/rest/v1/{table_name}"
    
    def select(self, columns: str = "*"):
        return SimpleSupabaseQuery(self.url, self.headers, 'select', columns)
    
    def insert(self, data: dict):
        return SimpleSupabaseQuery(self.url, self.headers, 'insert', data)
    
    def update(self, data: dict):
        return SimpleSupabaseQuery(self.url, self.headers, 'update', data)
    
    def delete(self):
        return SimpleSupabaseQuery(self.url, self.headers, 'delete')

class SimpleSupabaseQuery:
    def __init__(self, url: str, headers: dict, method: str, data=None):
        self.url = url
        self.headers = headers
        self.method = method
        self.data = data
        self.params = {}
    
    def eq(self, column: str, value):
        if 'select' in self.url:
            self.params[f'{column}'] = f'eq.{value}'
        return self
    
    def order(self, column: str, direction: str = 'asc'):
        self.params['order'] = f'{column}.{direction}'
        return self
    
    def limit(self, count: int):
        self.params['limit'] = str(count)
        return self
    
    def gte(self, column: str, value):
        self.params[f'{column}'] = f'gte.{value}'
        return self
    
    def lt(self, column: str, value):
        self.params[f'{column}'] = f'lt.{value}'
        return self
    
    def execute(self):
        try:
            if self.method == 'select':
                response = requests.get(self.url, headers=self.headers, params=self.params)
            elif self.method == 'insert':
                response = requests.post(self.url, headers=self.headers, json=self.data)
            elif self.method == 'update':
                response = requests.patch(self.url, headers=self.headers, json=self.data, params=self.params)
            elif self.method == 'delete':
                response = requests.delete(self.url, headers=self.headers, params=self.params)
            
            response.raise_for_status()
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –ø–æ—Ö–æ–∂–∏–π –Ω–∞ Supabase
            class Result:
                def __init__(self, data):
                    self.data = data
            
            if self.method == 'select':
                return Result(response.json())
            else:
                return Result(response.json())
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return Result([])

# –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫–ª–∏–µ–Ω—Ç
supabase = SimpleSupabaseClient(SUPABASE_URL, SUPABASE_KEY)

# –ö—ç—à –¥–ª—è family_id (–≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ 5 –º–∏–Ω—É—Ç)
family_id_cache = {}
CACHE_TTL = 300  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

def safe_execute(query_func, max_retries=5, delay=1):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    for attempt in range(max_retries):
        try:
            return query_func()
        except Exception as e:
            error_msg = str(e).lower()
            if any(keyword in error_msg for keyword in ['timeout', 'timed out', 'connection', 'network']):
                print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞ (—Ç–∞–π–º–∞—É—Ç), –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay}—Å...")
            else:
                print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay}—Å...")
            
            if attempt == max_retries - 1:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                return None
            
            time.sleep(min(delay * (2 ** attempt), 10))
    return None

def get_thai_time():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ç–∞–π—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    thai_tz = pytz.timezone('Asia/Bangkok')
    utc_now = datetime.now(pytz.UTC)
    thai_now = utc_now.astimezone(thai_tz)
    return thai_now

def get_thai_date():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ç–∞–π—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    return get_thai_time().date()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
# (–í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ supabase_client.py)

def init_supabase():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)"""
    print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ Supabase –∫–ª–∏–µ–Ω—Ç–∞...")
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        result = supabase.table('families').select('id').limit(1).execute()
        print("‚úÖ –ü—Ä–æ—Å—Ç–æ–π Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ Supabase –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False

# –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ supabase_client.py
# –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ —è –Ω–µ –∫–æ–ø–∏—Ä—É—é –∏—Ö –≤—Å–µ, –Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
