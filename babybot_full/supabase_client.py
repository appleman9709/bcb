"""
Supabase –∫–ª–∏–µ–Ω—Ç –¥–ª—è BabyBot
–ó–∞–º–µ–Ω—è–µ—Ç SQLite —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ Supabase PostgreSQL
"""

import os
from datetime import datetime, timedelta
from supabase import create_client, Client
from typing import Optional, List, Tuple, Dict, Any
import pytz
from dotenv import load_dotenv
import time

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_KEY = os.getenv('SUPABASE_KEY')

if not all([SUPABASE_URL, SUPABASE_KEY]):
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    print("üìù –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ .env —Ñ–∞–π–ª–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:")
    print("   ‚Ä¢ SUPABASE_URL")
    print("   ‚Ä¢ SUPABASE_KEY")
    exit(1)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# –ö—ç—à –¥–ª—è family_id (–≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ 5 –º–∏–Ω—É—Ç)
family_id_cache = {}
CACHE_TTL = 300  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

def safe_execute(query_func, max_retries=5, delay=1):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    for attempt in range(max_retries):
        try:
            return query_func()
        except Exception as e:
            error_msg = str(e).lower()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞
            if any(keyword in error_msg for keyword in ['timeout', 'timed out', 'connection', 'network', 'read operation timed out']):
                print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞ (—Ç–∞–π–º–∞—É—Ç), –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay}—Å...")
            else:
                print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay}—Å...")
            
            if attempt == max_retries - 1:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                return None
            
            # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            time.sleep(min(delay * (2 ** attempt), 10))
    return None

def get_thai_time():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ç–∞–π—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    thai_tz = pytz.timezone('Asia/Bangkok')
    utc_now = datetime.now(pytz.UTC)
    thai_now = utc_now.astimezone(thai_tz)
    return thai_now

def get_thai_date():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ç–∞–π—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    return get_thai_time().date()

# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –°–ï–ú–¨–Ø–ú–ò ====================

def get_family_id(user_id: int) -> Optional[int]:
    """–ü–æ–ª—É—á–∏—Ç—å ID —Å–µ–º—å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if user_id in family_id_cache:
        cached_data = family_id_cache[user_id]
        if current_time - cached_data['timestamp'] < CACHE_TTL:
            return cached_data['family_id']
        else:
            # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à
            del family_id_cache[user_id]
    
    def query():
        result = supabase.table('family_members').select('family_id').eq('user_id', user_id).execute()
        if result.data:
            return result.data[0]['family_id']
        return None
    
    result = safe_execute(query)
    if result is None:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        print(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è family_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        time.sleep(2)
        result = safe_execute(query)
    
    # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–¥–∞–∂–µ –µ—Å–ª–∏ None)
    if result is not None:
        family_id_cache[user_id] = {
            'family_id': result,
            'timestamp': current_time
        }
    
    return result

def create_family(name: str, user_id: int) -> Optional[int]:
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ–º—å—é"""
    def query():
        # –°–æ–∑–¥–∞–µ–º —Å–µ–º—å—é
        family_result = supabase.table('families').insert({'name': name}).execute()
        family_id = family_result.data[0]['id']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ–º—å—é
        supabase.table('family_members').insert({
            'family_id': family_id,
            'user_id': user_id,
            'role': '–†–æ–¥–∏—Ç–µ–ª—å',
            'name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        }).execute()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        supabase.table('settings').insert({
            'family_id': family_id,
            'feed_interval': 3,
            'diaper_interval': 2,
            'tips_enabled': True,
            'tips_time_hour': 9,
            'tips_time_minute': 0,
            'bath_reminder_enabled': True,
            'bath_reminder_hour': 19,
            'bath_reminder_minute': 0,
            'bath_reminder_period': 1,
            'activity_reminder_enabled': True,
            'activity_reminder_interval': 2,
            'baby_age_months': 0
        }).execute()
        
        return family_id
    
    result = safe_execute(query)
    
    # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–º—å–∏
    if result and user_id in family_id_cache:
        del family_id_cache[user_id]
    
    return result

def join_family_by_code(code: str, user_id: int) -> Tuple[Optional[int], str]:
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–µ–º—å–µ –ø–æ –∫–æ–¥—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    def query():
        family_id = int(code)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–µ–º—å—è
        family_result = supabase.table('families').select('id, name').eq('id', family_id).execute()
        if not family_result.data:
            return None, "–°–µ–º—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        family = family_result.data[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–µ–º—å–µ
        existing_result = supabase.table('family_members').select('family_id').eq('user_id', user_id).execute()
        if existing_result.data:
            return None, "–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ–º—å—é
        supabase.table('family_members').insert({
            'family_id': family_id,
            'user_id': user_id,
            'role': '–†–æ–¥–∏—Ç–µ–ª—å',
            'name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        }).execute()
        
        return family_id, family['name']
    
    try:
        result = safe_execute(query)
        if result:
            family_id, family_name = result
            # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —Å–µ–º—å–µ
            if user_id in family_id_cache:
                del family_id_cache[user_id]
            return family_id, family_name
        else:
            return None, "–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–µ–º—å–µ"
    except ValueError:
        return None, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–µ–º—å–µ: {e}")
        return None, "–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–µ–º—å–µ"

def get_family_name(family_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º—å–∏ –ø–æ ID"""
    try:
        result = supabase.table('families').select('name').eq('id', family_id).execute()
        if result.data:
            return result.data[0]['name']
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ–º—å—è"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–º—å–∏: {e}")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ–º—å—è"

def get_member_info(user_id: int) -> Tuple[Optional[str], Optional[str]]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–ª–µ–Ω–µ —Å–µ–º—å–∏"""
    try:
        result = supabase.table('family_members').select('role, name').eq('user_id', user_id).execute()
        if result.data:
            member = result.data[0]
            return member['role'], member['name']
        return None, None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–ª–µ–Ω–µ —Å–µ–º—å–∏: {e}")
        return None, None

def set_member_role(user_id: int, role: str, name: str) -> bool:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –∏ –∏–º—è –¥–ª—è —á–ª–µ–Ω–∞ —Å–µ–º—å–∏"""
    try:
        supabase.table('family_members').update({
            'role': role,
            'name': name
        }).eq('user_id', user_id).execute()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–æ–ª–∏: {e}")
        return False

def get_family_members_with_roles(family_id: int) -> List[Tuple[int, str, str]]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏ —Å —Ä–æ–ª—è–º–∏"""
    try:
        result = supabase.table('family_members').select('user_id, role, name').eq('family_id', family_id).execute()
        return [(member['user_id'], member['role'], member['name']) for member in result.data]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏: {e}")
        return []

# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–û–†–ú–õ–ï–ù–ò–ô ====================

def add_feeding(user_id: int, minutes_ago: int = 0, force: bool = False) -> bool:
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏"""
    try:
        family_id = get_family_id(user_id)
        if not family_id:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç (–µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)
        if not force and check_recent_feeding(family_id, 30):
            return False  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞
        
        role, name = get_member_info(user_id)
        if not role:
            role, name = '–†–æ–¥–∏—Ç–µ–ª—å', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        timestamp = get_thai_time() - timedelta(minutes=minutes_ago)
        
        supabase.table('feedings').insert({
            'family_id': family_id,
            'author_id': user_id,
            'timestamp': timestamp.isoformat(),
            'author_role': role,
            'author_name': name
        }).execute()
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏—è: {e}")
        return False

def get_last_feeding_time(user_id: int) -> Optional[datetime]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è"""
    try:
        family_id = get_family_id(user_id)
        if not family_id:
            return None
        
        result = supabase.table('feedings').select('timestamp').eq('family_id', family_id).order('timestamp', desc=True).limit(1).execute()
        
        if result.data:
            timestamp_str = result.data[0]['timestamp']
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º UTC –≤—Ä–µ–º—è –≤ —Ç–∞–π—Å–∫–æ–µ –≤—Ä–µ–º—è
            utc_time = datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
            thai_tz = pytz.timezone('Asia/Bangkok')
            return utc_time.astimezone(thai_tz)
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è: {e}")
        return None

def get_last_feeding_time_for_family(family_id: int) -> Optional[datetime]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è –¥–ª—è —Å–µ–º—å–∏"""
    try:
        result = supabase.table('feedings').select('timestamp').eq('family_id', family_id).order('timestamp', desc=True).limit(1).execute()
        
        if result.data:
            timestamp_str = result.data[0]['timestamp']
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º UTC –≤—Ä–µ–º—è –≤ —Ç–∞–π—Å–∫–æ–µ –≤—Ä–µ–º—è
            utc_time = datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
            thai_tz = pytz.timezone('Asia/Bangkok')
            return utc_time.astimezone(thai_tz)
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è –¥–ª—è —Å–µ–º—å–∏: {e}")
        return None

# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–î–ì–£–ó–ù–ò–ö–û–í ====================

def add_diaper_change(user_id: int, minutes_ago: int = 0, force: bool = False) -> bool:
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ —Å–º–µ–Ω–µ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞"""
    try:
        family_id = get_family_id(user_id)
        if not family_id:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç (–µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)
        if not force and check_recent_diaper_change(family_id, 30):
            return False  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞
        
        role, name = get_member_info(user_id)
        if not role:
            role, name = '–†–æ–¥–∏—Ç–µ–ª—å', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        timestamp = get_thai_time() - timedelta(minutes=minutes_ago)
        
        supabase.table('diapers').insert({
            'family_id': family_id,
            'author_id': user_id,
            'timestamp': timestamp.isoformat(),
            'author_role': role,
            'author_name': name
        }).execute()
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞: {e}")
        return False

def get_last_diaper_change_time_for_family(family_id: int) -> Optional[datetime]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ –¥–ª—è —Å–µ–º—å–∏"""
    try:
        result = supabase.table('diapers').select('timestamp').eq('family_id', family_id).order('timestamp', desc=True).limit(1).execute()
        
        if result.data:
            timestamp_str = result.data[0]['timestamp']
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º UTC –≤—Ä–µ–º—è –≤ —Ç–∞–π—Å–∫–æ–µ –≤—Ä–µ–º—è
            utc_time = datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
            thai_tz = pytz.timezone('Asia/Bangkok')
            return utc_time.astimezone(thai_tz)
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞: {e}")
        return None

def get_last_diaper_change_for_family(family_id: int) -> Optional[datetime]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ –¥–ª—è —Å–µ–º—å–∏ (–∞–ª–∏–∞—Å)"""
    return get_last_diaper_change_time_for_family(family_id)

def check_recent_feeding(family_id: int, minutes_threshold: int = 30) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –±—ã–ª–æ –ª–∏ –∫–æ—Ä–º–ª–µ–Ω–∏–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–∏–Ω—É—Ç"""
    try:
        last_feeding = get_last_feeding_time_for_family(family_id)
        if not last_feeding:
            return False
        
        now = get_thai_time()
        time_diff = now - last_feeding
        minutes_ago = int(time_diff.total_seconds() / 60)
        
        return minutes_ago < minutes_threshold
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è: {e}")
        return False

def check_recent_diaper_change(family_id: int, minutes_threshold: int = 30) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –±—ã–ª–∞ –ª–∏ —Å–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–∏–Ω—É—Ç"""
    try:
        last_diaper = get_last_diaper_change_time_for_family(family_id)
        if not last_diaper:
            return False
        
        now = get_thai_time()
        time_diff = now - last_diaper
        minutes_ago = int(time_diff.total_seconds() / 60)
        
        return minutes_ago < minutes_threshold
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞: {e}")
        return False

# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ù–ê–°–¢–†–û–ï–ö ====================

def get_user_intervals(family_id: int) -> Tuple[int, int]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∫–æ—Ä–º–ª–µ–Ω–∏—è –∏ —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–æ–≤"""
    try:
        result = supabase.table('settings').select('feed_interval, diaper_interval').eq('family_id', family_id).execute()
        if result.data:
            settings = result.data[0]
            return settings['feed_interval'], settings['diaper_interval']
        return 3, 2
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤: {e}")
        return 3, 2

def set_user_interval(family_id: int, feed_interval: Optional[int] = None, diaper_interval: Optional[int] = None) -> bool:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∫–æ—Ä–º–ª–µ–Ω–∏—è –∏ —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–æ–≤"""
    try:
        update_data = {}
        if feed_interval is not None:
            update_data['feed_interval'] = feed_interval
        if diaper_interval is not None:
            update_data['diaper_interval'] = diaper_interval
        
        if update_data:
            supabase.table('settings').update(update_data).eq('family_id', family_id).execute()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤: {e}")
        return False

def get_birth_date(family_id: int) -> Optional[str]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –º–∞–ª—ã—à–∞"""
    try:
        result = supabase.table('settings').select('baby_birth_date').eq('family_id', family_id).execute()
        if result.data and result.data[0]['baby_birth_date']:
            return result.data[0]['baby_birth_date']
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è: {e}")
        return None

def set_birth_date(family_id: int, birth_date: str) -> bool:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –º–∞–ª—ã—à–∞"""
    try:
        supabase.table('settings').update({'baby_birth_date': birth_date}).eq('family_id', family_id).execute()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—á–∏—Å–ª—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
        age_months = get_baby_age_months(family_id)
        if age_months > 0:
            set_baby_age_months(family_id, age_months)
            print(f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç –º–∞–ª—ã—à–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {age_months} –º–µ—Å—è—Ü–µ–≤")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è: {e}")
        return False

def get_baby_age_months(family_id: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –º–∞–ª—ã—à–∞ –≤ –º–µ—Å—è—Ü–∞—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    try:
        from datetime import datetime
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
        birth_date_str = get_birth_date(family_id)
        if not birth_date_str:
            return 0
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
        birth_date = datetime.strptime(birth_date_str, '%Y-%m-%d')
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        now = get_thai_time()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –≤ –º–µ—Å—è—Ü–∞—Ö
        age_months = (now.year - birth_date.year) * 12 + (now.month - birth_date.month)
        
        # –ï—Å–ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ, —É–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 1
        if now.day < birth_date.day:
            age_months -= 1
        
        # –í–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
        return max(0, age_months)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ –º–∞–ª—ã—à–∞: {e}")
        return 0

def set_baby_age_months(family_id: int, age_months: int) -> bool:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –º–∞–ª—ã—à–∞ –≤ –º–µ—Å—è—Ü–∞—Ö"""
    try:
        supabase.table('settings').update({'baby_age_months': age_months}).eq('family_id', family_id).execute()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ –º–∞–ª—ã—à–∞: {e}")
        return False

# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–£–ü–ê–ù–ò–ô ====================

def add_bath(user_id: int, minutes_ago: int = 0) -> bool:
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –∫—É–ø–∞–Ω–∏–∏"""
    try:
        family_id = get_family_id(user_id)
        if not family_id:
            return False
        
        role, name = get_member_info(user_id)
        if not role:
            role, name = '–†–æ–¥–∏—Ç–µ–ª—å', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        timestamp = get_thai_time() - timedelta(minutes=minutes_ago)
        
        supabase.table('baths').insert({
            'family_id': family_id,
            'author_id': user_id,
            'timestamp': timestamp.isoformat(),
            'author_role': role,
            'author_name': name
        }).execute()
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É–ø–∞–Ω–∏—è: {e}")
        return False

def get_last_bath_time_for_family(family_id: int) -> Optional[datetime]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫—É–ø–∞–Ω–∏—è –¥–ª—è —Å–µ–º—å–∏"""
    try:
        result = supabase.table('baths').select('timestamp').eq('family_id', family_id).order('timestamp', desc=True).limit(1).execute()
        
        if result.data:
            timestamp_str = result.data[0]['timestamp']
            return datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫—É–ø–∞–Ω–∏—è: {e}")
        return None

# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–ö–¢–ò–í–ù–û–°–¢–ï–ô ====================

def add_activity(user_id: int, activity_type: str = '–ò–≥—Ä–∞', minutes_ago: int = 0) -> bool:
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    try:
        family_id = get_family_id(user_id)
        if not family_id:
            return False
        
        role, name = get_member_info(user_id)
        if not role:
            role, name = '–†–æ–¥–∏—Ç–µ–ª—å', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        timestamp = get_thai_time() - timedelta(minutes=minutes_ago)
        
        supabase.table('activities').insert({
            'family_id': family_id,
            'author_id': user_id,
            'timestamp': timestamp.isoformat(),
            'activity_type': activity_type,
            'author_role': role,
            'author_name': name
        }).execute()
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
        return False

def get_last_activity_time_for_family(family_id: int) -> Optional[datetime]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–µ–º—å–∏"""
    try:
        result = supabase.table('activities').select('timestamp').eq('family_id', family_id).order('timestamp', desc=True).limit(1).execute()
        
        if result.data:
            timestamp_str = result.data[0]['timestamp']
            return datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
        return None


# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò ====================

def get_feeding_stats(family_id: int, days: int = 7) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–º–ª–µ–Ω–∏–π"""
    try:
        start_date = get_thai_time() - timedelta(days=days)
        
        result = supabase.table('feedings').select('timestamp').eq('family_id', family_id).gte('timestamp', start_date.isoformat()).execute()
        
        return {
            'count': len(result.data),
            'last_time': get_last_feeding_time_for_family(family_id)
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–º–ª–µ–Ω–∏–π: {e}")
        return {'count': 0, 'last_time': None}

def get_diaper_stats(family_id: int, days: int = 7) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–º–µ–Ω –ø–æ–¥–≥—É–∑–Ω–∏–∫–æ–≤"""
    try:
        start_date = get_thai_time() - timedelta(days=days)
        
        result = supabase.table('diapers').select('timestamp').eq('family_id', family_id).gte('timestamp', start_date.isoformat()).execute()
        
        return {
            'count': len(result.data),
            'last_time': get_last_diaper_change_time_for_family(family_id)
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–≥—É–∑–Ω–∏–∫–æ–≤: {e}")
        return {'count': 0, 'last_time': None}

def get_bath_stats(family_id: int, days: int = 7) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—É–ø–∞–Ω–∏–π"""
    try:
        start_date = get_thai_time() - timedelta(days=days)
        
        result = supabase.table('baths').select('timestamp').eq('family_id', family_id).gte('timestamp', start_date.isoformat()).execute()
        
        return {
            'count': len(result.data),
            'last_time': get_last_bath_time_for_family(family_id)
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—É–ø–∞–Ω–∏–π: {e}")
        return {'count': 0, 'last_time': None}

def get_activity_stats(family_id: int, days: int = 7) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"""
    try:
        start_date = get_thai_time() - timedelta(days=days)
        
        result = supabase.table('activities').select('timestamp').eq('family_id', family_id).gte('timestamp', start_date.isoformat()).execute()
        
        return {
            'count': len(result.data),
            'last_time': get_last_activity_time_for_family(family_id)
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: {e}")
        return {'count': 0, 'last_time': None}

# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ù–ê–°–¢–†–û–ï–ö –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ====================

def get_notification_settings(family_id: int) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        result = supabase.table('settings').select('*').eq('family_id', family_id).execute()
        if result.data:
            return result.data[0]
        return {}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return {}

def update_notification_settings(family_id: int, settings: Dict[str, Any]) -> bool:
    """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        supabase.table('settings').update(settings).eq('family_id', family_id).execute()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return False

# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–í–ï–¢–û–í ====================

def get_random_tip(age_months: int) -> Optional[str]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        import random
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–≤–µ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
        result = supabase.table('tips').select('content').eq('age_months', age_months).execute()
        
        if result.data:
            return random.choice(result.data)['content']
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞, –∏—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –¥–ª—è –º–µ–Ω—å—à–∏—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤ (–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–æ–≤–µ—Ç—ã)
        for check_age in range(age_months - 1, -1, -1):
            result = supabase.table('tips').select('content').eq('age_months', check_age).execute()
            if result.data:
                return random.choice(result.data)['content']
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¥–ª—è –º–µ–Ω—å—à–∏—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤, –∏—â–µ–º –¥–ª—è –±–æ–ª—å—à–∏—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤
        for check_age in range(age_months + 1, 13):  # –¥–æ 12 –º–µ—Å—è—Ü–µ–≤
            result = supabase.table('tips').select('content').eq('age_months', check_age).execute()
            if result.data:
                return random.choice(result.data)['content']
        
        # –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ—Ç —Å–æ–≤–µ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–π —Å–æ–≤–µ—Ç
        return "üí° –ü–æ–º–Ω–∏—Ç–µ: –∫–∞–∂–¥—ã–π –º–∞–ª—ã—à —É–Ω–∏–∫–∞–ª–µ–Ω! –°–ª–µ–¥—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –ø–µ–¥–∏–∞—Ç—Ä–∞ –∏ –¥–æ–≤–µ—Ä—è–π—Ç–µ —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏."
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–∞: {e}")
        return "üí° –ü–æ–º–Ω–∏—Ç–µ: –∫–∞–∂–¥—ã–π –º–∞–ª—ã—à —É–Ω–∏–∫–∞–ª–µ–Ω! –°–ª–µ–¥—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –ø–µ–¥–∏–∞—Ç—Ä–∞ –∏ –¥–æ–≤–µ—Ä—è–π—Ç–µ —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏."

def get_tips_by_category(age_months: int, category: str) -> List[str]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        result = supabase.table('tips').select('content').eq('age_months', age_months).eq('category', category).execute()
        return [tip['content'] for tip in result.data]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        return []

def get_all_categories() -> List[str]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–≤–µ—Ç–æ–≤"""
    try:
        result = supabase.table('tips').select('category').execute()
        categories = list(set([tip['category'] for tip in result.data]))
        return sorted(categories)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        return []

# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ò–°–¢–û–†–ò–ò ====================

def get_feeding_history(family_id: int, limit: int = 10) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ—Ä–º–ª–µ–Ω–∏–π"""
    try:
        result = supabase.table('feedings').select('*').eq('family_id', family_id).order('timestamp', desc=True).limit(limit).execute()
        return result.data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ—Ä–º–ª–µ–Ω–∏–π: {e}")
        return []

def get_diaper_history(family_id: int, limit: int = 10) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–º–µ–Ω –ø–æ–¥–≥—É–∑–Ω–∏–∫–æ–≤"""
    try:
        result = supabase.table('diapers').select('*').eq('family_id', family_id).order('timestamp', desc=True).limit(limit).execute()
        return result.data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–¥–≥—É–∑–Ω–∏–∫–æ–≤: {e}")
        return []

def get_bath_history(family_id: int, limit: int = 10) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫—É–ø–∞–Ω–∏–π"""
    try:
        result = supabase.table('baths').select('*').eq('family_id', family_id).order('timestamp', desc=True).limit(limit).execute()
        return result.data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫—É–ø–∞–Ω–∏–π: {e}")
        return []

def get_activity_history(family_id: int, limit: int = 10) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"""
    try:
        result = supabase.table('activities').select('*').eq('family_id', family_id).order('timestamp', desc=True).limit(limit).execute()
        return result.data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: {e}")
        return []


# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø ====================

def test_connection() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase"""
    def query():
        result = supabase.table('families').select('id').limit(1).execute()
        return True
    
    try:
        result = safe_execute(query, max_retries=2, delay=2)
        if result:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫")
            return False
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
        return False

# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ====================

def get_families_needing_feeding_reminder() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–µ–º—å–∏, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–º—å–∏ —Å –∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        families_result = supabase.table('settings').select('family_id, feed_interval').execute()
        
        families_needing_reminder = []
        
        for family in families_result.data:
            family_id = family['family_id']
            feed_interval = family['feed_interval']
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
            last_feeding = get_last_feeding_time_for_family(family_id)
            if not last_feeding:
                # –ï—Å–ª–∏ –∫–æ—Ä–º–ª–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –±–æ–ª—å—à–µ 1 —á–∞—Å–∞
                continue
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
            now = get_thai_time()
            time_diff = now - last_feeding
            hours_since_feeding = time_diff.total_seconds() / 3600
            
            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∫–æ—Ä–º–ª–µ–Ω–∏—è
            if hours_since_feeding >= feed_interval:
                families_needing_reminder.append({
                    'family_id': family_id,
                    'hours_since_feeding': hours_since_feeding,
                    'feed_interval': feed_interval
                })
        
        return families_needing_reminder
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–º–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏: {e}")
        return []

def get_families_needing_diaper_reminder() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–µ–º—å–∏, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–º–µ–Ω–µ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–º—å–∏ —Å –∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        families_result = supabase.table('settings').select('family_id, diaper_interval').execute()
        
        families_needing_reminder = []
        
        for family in families_result.data:
            family_id = family['family_id']
            diaper_interval = family['diaper_interval']
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞
            last_diaper = get_last_diaper_change_time_for_family(family_id)
            if not last_diaper:
                # –ï—Å–ª–∏ —Å–º–µ–Ω –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ –Ω–µ –±—ã–ª–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –±–æ–ª—å—à–µ 1 —á–∞—Å–∞
                continue
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–º–µ–Ω—ã
            now = get_thai_time()
            time_diff = now - last_diaper
            hours_since_diaper = time_diff.total_seconds() / 3600
            
            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞
            if hours_since_diaper >= diaper_interval:
                families_needing_reminder.append({
                    'family_id': family_id,
                    'hours_since_diaper': hours_since_diaper,
                    'diaper_interval': diaper_interval
                })
        
        return families_needing_reminder
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–º–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–º–µ–Ω–µ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞: {e}")
        return []

def get_family_members_for_notification(family_id: int) -> List[int]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ user_id –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        result = supabase.table('family_members').select('user_id').eq('family_id', family_id).execute()
        return [member['user_id'] for member in result.data]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return []

def check_smart_reminder_conditions(family_id: int) -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–º—å–∏
        settings = get_notification_settings(family_id)
        if not settings:
            return {'needs_feeding': False, 'needs_diaper': False}
        
        feed_interval = settings.get('feed_interval', 3)
        diaper_interval = settings.get('diaper_interval', 2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–º–ª–µ–Ω–∏–µ
        last_feeding = get_last_feeding_time_for_family(family_id)
        needs_feeding = False
        hours_since_feeding = 0
        
        if last_feeding:
            now = get_thai_time()
            time_diff = now - last_feeding
            hours_since_feeding = time_diff.total_seconds() / 3600
            needs_feeding = hours_since_feeding >= feed_interval
        else:
            # –ï—Å–ª–∏ –∫–æ—Ä–º–ª–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º —á–µ—Ä–µ–∑ 1 —á–∞—Å
            needs_feeding = True
            hours_since_feeding = 24  # –ë–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞
        last_diaper = get_last_diaper_change_time_for_family(family_id)
        needs_diaper = False
        hours_since_diaper = 0
        
        if last_diaper:
            now = get_thai_time()
            time_diff = now - last_diaper
            hours_since_diaper = time_diff.total_seconds() / 3600
            needs_diaper = hours_since_diaper >= diaper_interval
        else:
            # –ï—Å–ª–∏ —Å–º–µ–Ω –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ –Ω–µ –±—ã–ª–æ, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º —á–µ—Ä–µ–∑ 1 —á–∞—Å
            needs_diaper = True
            hours_since_diaper = 24  # –ë–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        return {
            'needs_feeding': needs_feeding,
            'needs_diaper': needs_diaper,
            'hours_since_feeding': hours_since_feeding,
            'hours_since_diaper': hours_since_diaper,
            'feed_interval': feed_interval,
            'diaper_interval': diaper_interval
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        return {'needs_feeding': False, 'needs_diaper': False}

def get_smart_reminder_message(family_id: int) -> Optional[str]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Å–µ–º—å–∏"""
    try:
        conditions = check_smart_reminder_conditions(family_id)
        
        if not conditions['needs_feeding'] and not conditions['needs_diaper']:
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ –Ω—É–∂–Ω–æ
        if conditions['needs_feeding'] and conditions['needs_diaper']:
            message = "üîî **–í—Ä–µ–º—è –∫–æ—Ä–º–ª–µ–Ω–∏—è –∏ —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞!**\n\n"
        elif conditions['needs_feeding']:
            message = "üçº **–í—Ä–µ–º—è –∫–æ—Ä–º–ª–µ–Ω–∏—è!**\n\n"
        else:
            message = "üí© **–í—Ä–µ–º—è —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞!**\n\n"
        
        if conditions['needs_feeding']:
            hours = int(conditions['hours_since_feeding'])
            minutes = int((conditions['hours_since_feeding'] - hours) * 60)
            
            if hours > 0:
                time_str = f"{hours}—á {minutes}–º"
            else:
                time_str = f"{minutes}–º"
            
            if conditions['hours_since_feeding'] >= 24:
                message += f"üçº **–ö–æ—Ä–º–ª–µ–Ω–∏–µ:**\n"
                message += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –∫–æ—Ä–º–∏–ª–∏: –¥–∞–≤–Ω–æ\n"
                message += f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {conditions['feed_interval']}—á\n\n"
            else:
                message += f"üçº **–ö–æ—Ä–º–ª–µ–Ω–∏–µ:**\n"
                message += f"‚Ä¢ –ü—Ä–æ—à–ª–æ: {time_str}\n"
                message += f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {conditions['feed_interval']}—á\n\n"
        
        if conditions['needs_diaper']:
            hours = int(conditions['hours_since_diaper'])
            minutes = int((conditions['hours_since_diaper'] - hours) * 60)
            
            if hours > 0:
                time_str = f"{hours}—á {minutes}–º"
            else:
                time_str = f"{minutes}–º"
            
            if conditions['hours_since_diaper'] >= 24:
                message += f"üí© **–°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞:**\n"
                message += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–º–µ–Ω–∞: –¥–∞–≤–Ω–æ\n"
                message += f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {conditions['diaper_interval']}—á\n\n"
            else:
                message += f"üí© **–°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞:**\n"
                message += f"‚Ä¢ –ü—Ä–æ—à–ª–æ: {time_str}\n"
                message += f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {conditions['diaper_interval']}—á\n\n"
        
        message += "üí° **–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**"
        
        return message
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        return None

def get_all_families() -> List[int]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö ID —Å–µ–º–µ–π"""
    try:
        result = supabase.table('families').select('id').execute()
        return [family['id'] for family in result.data]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ–º–µ–π: {e}")
        return []

# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–≠–®–ï–ú ====================

def clear_family_cache(user_id: int = None):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à family_id"""
    if user_id:
        if user_id in family_id_cache:
            del family_id_cache[user_id]
            print(f"üßπ –ö—ç—à family_id –æ—á–∏—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    else:
        family_id_cache.clear()
        print("üßπ –í–µ—Å—å –∫—ç—à family_id –æ—á–∏—â–µ–Ω")

def get_cache_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
    current_time = time.time()
    active_entries = 0
    expired_entries = 0
    
    for user_id, data in family_id_cache.items():
        if current_time - data['timestamp'] < CACHE_TTL:
            active_entries += 1
        else:
            expired_entries += 1
    
    return {
        'total_entries': len(family_id_cache),
        'active_entries': active_entries,
        'expired_entries': expired_entries
    }

# ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================

def init_supabase():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)"""
    print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase...")
    if test_connection():
        print("‚úÖ Supabase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase")
        return False
