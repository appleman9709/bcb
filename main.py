from telethon import TelegramClient, events, Button
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio
import threading
import time
import http.server
import socketserver
import pytz
import subprocess
from typing import Optional

import os
from dotenv import load_dotenv

try:
    from supabase_client import (
        init_supabase, get_family_id, create_family, join_family_by_code, get_family_name, 
        get_member_info, set_member_role, get_family_members_with_roles,
        add_feeding, get_last_feeding_time, get_last_feeding_time_for_family,
        add_diaper_change, get_last_diaper_change_time_for_family, get_last_diaper_change_for_family,
        check_recent_feeding, check_recent_diaper_change,
        get_user_intervals, set_user_interval, get_birth_date, set_birth_date,
        get_baby_age_months, set_baby_age_months,
        add_bath, get_last_bath_time_for_family,
        add_activity, get_last_activity_time_for_family,
        get_feeding_stats, get_diaper_stats, get_bath_stats, get_activity_stats,
        get_notification_settings, update_notification_settings,
        get_random_tip, get_feeding_history, get_diaper_history, get_bath_history,
        get_activity_history, test_connection,
        # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        check_smart_reminder_conditions, get_smart_reminder_message, 
        get_family_members_for_notification, get_all_families, get_thai_time,
        # –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        check_pre_reminder_conditions, check_overdue_reminder_conditions,
        get_pre_reminder_message, get_overdue_reminder_message,
        get_time_until_next_feeding, get_time_until_next_diaper_change,
        # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        log_notification_sent, check_recent_notification, acknowledge_notification,
        cleanup_old_notifications
    )
    print("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π Supabase –∫–ª–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ Supabase –∫–ª–∏–µ–Ω—Ç–∞: {e}")
    print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å–∏—é...")
    try:
        from supabase_client_fallback import (
            init_supabase, get_family_id, create_family, join_family_by_code, get_family_name, 
            get_member_info, set_member_role, get_family_members_with_roles,
            add_feeding, get_last_feeding_time, get_last_feeding_time_for_family,
            add_diaper_change, get_last_diaper_change_time_for_family, get_last_diaper_change_for_family,
            check_recent_feeding, check_recent_diaper_change,
            get_user_intervals, set_user_interval, get_birth_date, set_birth_date,
            get_baby_age_months, set_baby_age_months,
            add_bath, get_last_bath_time_for_family,
            add_activity, get_last_activity_time_for_family,
            get_feeding_stats, get_diaper_stats, get_bath_stats, get_activity_stats,
            get_notification_settings, update_notification_settings,
            get_random_tip, get_feeding_history, get_diaper_history, get_bath_history,
            get_activity_history, test_connection,
            # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            check_smart_reminder_conditions, get_smart_reminder_message, 
            get_family_members_for_notification, get_all_families, get_thai_time,
            # –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            check_pre_reminder_conditions, check_overdue_reminder_conditions,
            get_pre_reminder_message, get_overdue_reminder_message,
            get_time_until_next_feeding, get_time_until_next_diaper_change,
            # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            log_notification_sent, check_recent_notification, acknowledge_notification,
            cleanup_old_notifications
        )
        print("‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π Supabase –∫–ª–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e2:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Supabase –∫–ª–∏–µ–Ω—Ç–∞: {e2}")
        print("üõë –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ Supabase")
        exit(1)

load_dotenv()

API_ID = os.getenv('API_ID')
API_HASH = os.getenv('API_HASH')
BOT_TOKEN = os.getenv('BOT_TOKEN')
REPLIT_EXTERNAL_URL = os.getenv('REPLIT_EXTERNAL_URL')  # –î–ª—è UptimeRobot

if not all([API_ID, API_HASH, BOT_TOKEN]):
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    print("üìù –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ .env —Ñ–∞–π–ª–µ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:")
    print("   ‚Ä¢ API_ID")
    print("   ‚Ä¢ API_HASH") 
    print("   ‚Ä¢ BOT_TOKEN")
    print("üîß –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ env.example")
    exit(1)

try:
    API_ID = int(API_ID)
except ValueError:
    print("‚ùå –û–®–ò–ë–ö–ê: API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    exit(1)

print("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")


def parse_time_input(time_str: str) -> Optional[int]:
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥"""
    try:
        time_str = time_str.strip().lower()
        
        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ - —Å—á–∏—Ç–∞–µ–º –º–∏–Ω—É—Ç–∞–º–∏
        if time_str.isdigit():
            return int(time_str)
        
        # –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç "—á" - —á–∞—Å—ã
        if "—á" in time_str:
            hours = int(time_str.replace("—á", "").strip())
            return hours * 60
        
        # –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç ":" - —á–∞—Å—ã:–º–∏–Ω—É—Ç—ã
        if ":" in time_str:
            parts = time_str.split(":")
            hours = int(parts[0])
            minutes = int(parts[1])
            return hours * 60 + minutes
        
        return None
    except:
        return None

def parse_time_setting(time_str: str) -> Optional[tuple]:
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—á–∞—Å—ã, –º–∏–Ω—É—Ç—ã)"""
    try:
        time_str = time_str.strip()
        
        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ - —Å—á–∏—Ç–∞–µ–º —á–∞—Å–∞–º–∏
        if time_str.isdigit():
            hours = int(time_str)
            return (hours, 0)
        
        # –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç ":" - —á–∞—Å—ã:–º–∏–Ω—É—Ç—ã
        if ":" in time_str:
            parts = time_str.split(":")
            hours = int(parts[0])
            minutes = int(parts[1])
            return (hours, minutes)
        
        return None
    except:
        return None

def parse_birth_date(date_str: str) -> Optional[str]:
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD"""
    try:
        date_str = date_str.strip()
        
        # –§–æ—Ä–º–∞—Ç YYYY-MM-DD
        if len(date_str) == 10 and date_str.count('-') == 2:
            parts = date_str.split('-')
            if len(parts) == 3:
                year, month, day = parts
                if year.isdigit() and month.isdigit() and day.isdigit():
                    year, month, day = int(year), int(month), int(day)
                    if 1900 <= year <= 2100 and 1 <= month <= 12 and 1 <= day <= 31:
                        return f"{year:04d}-{month:02d}-{day:02d}"
        
        # –§–æ—Ä–º–∞—Ç DD.MM.YYYY
        if len(date_str) == 10 and date_str.count('.') == 2:
            parts = date_str.split('.')
            if len(parts) == 3:
                day, month, year = parts
                if day.isdigit() and month.isdigit() and year.isdigit():
                    day, month, year = int(day), int(month), int(year)
                    if 1900 <= year <= 2100 and 1 <= month <= 12 and 1 <= day <= 31:
                        return f"{year:04d}-{month:02d}-{day:02d}"
        
        # –§–æ—Ä–º–∞—Ç DD/MM/YYYY
        if len(date_str) == 10 and date_str.count('/') == 2:
            parts = date_str.split('/')
            if len(parts) == 3:
                day, month, year = parts
                if day.isdigit() and month.isdigit() and year.isdigit():
                    day, month, year = int(day), int(month), int(year)
                    if 1900 <= year <= 2100 and 1 <= month <= 12 and 1 <= day <= 31:
                        return f"{year:04d}-{month:02d}-{day:02d}"
        
        return None
    except:
        return None

def acknowledge_feeding_notifications(fid):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏"""
    acknowledge_notification(fid, 'pre_feeding')
    acknowledge_notification(fid, 'regular_feeding')
    acknowledge_notification(fid, 'overdue_feeding')

def acknowledge_diaper_notifications(fid):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞"""
    acknowledge_notification(fid, 'pre_diaper')
    acknowledge_notification(fid, 'regular_diaper')
    acknowledge_notification(fid, 'overdue_diaper')

def handle_feeding_callback(event, minutes_ago):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∫–æ—Ä–º–ª–µ–Ω–∏—è"""
    uid = event.sender_id
    result = add_feeding(uid, minutes_ago)
    
    if result is True:
        fid = get_family_id(uid)
        if fid:
            acknowledge_feeding_notifications(fid)
        return True, "‚úÖ –ö–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ!"
    elif result is False:
        fid = get_family_id(uid)
        if fid and check_recent_feeding(fid, 30):
            duplicate_confirmation_pending[uid] = {"action": "feeding", "minutes_ago": minutes_ago}
            return False, "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!**\n\n–ö–æ—Ä–º–ª–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç.\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ –∫–æ—Ä–º–ª–µ–Ω–∏–µ?", [[Button.inline("‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å", b"confirm_duplicate"), Button.inline("‚ùå –û—Ç–º–µ–Ω–∞", b"cancel_duplicate")]]
        else:
            return False, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è"
    else:
        return False, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è"

def handle_diaper_callback(event, minutes_ago):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞"""
    uid = event.sender_id
    result = add_diaper_change(uid, minutes_ago)
    
    if result is True:
        fid = get_family_id(uid)
        if fid:
            acknowledge_diaper_notifications(fid)
        return True, "‚úÖ –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!"
    elif result is False:
        fid = get_family_id(uid)
        if fid and check_recent_diaper_change(fid, 30):
            duplicate_confirmation_pending[uid] = {"action": "diaper", "minutes_ago": minutes_ago}
            return False, "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!**\n\n–°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ —É–∂–µ –±—ã–ª–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç.\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É —Å–º–µ–Ω—É?", [[Button.inline("‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å", b"confirm_duplicate"), Button.inline("‚ùå –û—Ç–º–µ–Ω–∞", b"cancel_duplicate")]]
        else:
            return False, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞"
    else:
        return False, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞"

def format_time_message(hours, minutes, event_type):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–æ—Ä–º–ª–µ–Ω–∏—è –∏–ª–∏ —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞"""
    if hours > 0:
        time_str = f"{hours}—á {minutes}–º"
    else:
        time_str = f"{minutes}–º"
    
    if event_type == "feeding":
        if hours == 0 and minutes < 30:
            return f"üçº **–ú–∞–ª—ã—à –Ω–µ–¥–∞–≤–Ω–æ –ø–æ–µ–ª!**\n**{time_str} –Ω–∞–∑–∞–¥**\n\n"
        elif hours == 0:
            return f"üçº **–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –∫—É—à–∞–ª–∏:**\n**{time_str} –Ω–∞–∑–∞–¥**\n\n"
        elif hours < 2:
            return f"üçº **–í –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –∫–æ—Ä–º–∏–ª–∏:**\n**{time_str} –Ω–∞–∑–∞–¥**\n\n"
        else:
            return f"üçº **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ –±—ã–ª–æ:**\n**{time_str} –Ω–∞–∑–∞–¥**\n\n"
    else:  # diaper
        if hours == 0 and minutes < 30:
            return f"üß∑ **–ü–æ–¥–≥—É–∑–Ω–∏–∫ —Å–≤–µ–∂–∏–π!**\n**{time_str} –Ω–∞–∑–∞–¥**\n\n"
        elif hours == 0:
            return f"üß∑ **–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–º–µ–Ω–∞:**\n**{time_str} –Ω–∞–∑–∞–¥**\n\n"
        elif hours < 2:
            return f"üß∑ **–í –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –º–µ–Ω—è–ª–∏:**\n**{time_str} –Ω–∞–∑–∞–¥**\n\n"
        else:
            return f"üß∑ **–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–º–µ–Ω–∞ –±—ã–ª–∞:**\n**{time_str} –Ω–∞–∑–∞–¥**\n\n"

def calculate_next_time_message(hours, minutes, interval, event_type):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
    total_minutes_passed = hours * 60 + minutes
    total_interval_minutes = interval * 60
    remaining_minutes = total_interval_minutes - total_minutes_passed
    
    next_hours = remaining_minutes // 60
    next_minutes = remaining_minutes % 60
    
    if next_hours > 0:
        next_time_str = f"{next_hours}—á {next_minutes}–º"
    else:
        next_time_str = f"{next_minutes}–º"
    
    if event_type == "feeding":
        return f"‚è∞ **–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è:**\n**{next_time_str}**\n\n"
    else:  # diaper
        return f"‚è∞ **–î–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–º–µ–Ω—ã:**\n**{next_time_str}**\n\n"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ keep-alive (–¥–ª—è Replit)
def external_keep_alive():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ keep-alive —á–µ—Ä–µ–∑ Replit"""
    try:
        import urllib.request
        import urllib.error
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–π URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        external_url = REPLIT_EXTERNAL_URL
        if external_url:
            # –£–±–∏—Ä–∞–µ–º trailing slash –µ—Å–ª–∏ –µ—Å—Ç—å
            if external_url.endswith('/'):
                external_url = external_url[:-1]
            
            # –ü–∏–Ω–≥—É–µ–º –≤–Ω–µ—à–Ω–∏–π URL
            try:
                response = urllib.request.urlopen(f'{external_url}/ping', timeout=10)
                if response.getcode() == 200:
                    print(f"‚úÖ External keep-alive successful: {time.strftime('%H:%M:%S')}")
                else:
                    print(f"‚ö†Ô∏è External keep-alive returned status: {response.getcode()}")
            except urllib.error.URLError as e:
                print(f"‚ö†Ô∏è External keep-alive failed: {e}")
            except Exception as e:
                print(f"‚ö†Ô∏è External keep-alive error: {e}")
        else:
            print("‚ÑπÔ∏è External URL not set, skipping external keep-alive")
            
    except Exception as e:
        print(f"‚ùå External keep-alive critical error: {e}")

init_supabase()
scheduler = AsyncIOScheduler()

def keep_alive_ping():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    try:
        print(f"üíì Keep-alive ping: {time.strftime('%H:%M:%S')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
        if test_connection():
            print("‚úÖ Supabase connection OK")
        else:
            print("‚ùå Supabase connection failed")
            
    except Exception as e:
        print(f"‚ùå Keep-alive ping critical error: {e}")

telegram_client = None
reminder_queue = []  # –û—á–µ—Ä–µ–¥—å –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

def send_smart_reminders():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤—Å–µ–º —Å–µ–º—å—è–º"""
    global telegram_client, reminder_queue
    
    if not telegram_client:
        print("‚ö†Ô∏è Telegram client not available for reminders")
        return
    
    try:
        print(f"üîî Checking smart reminders: {time.strftime('%H:%M:%S')}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–º—å–∏
        families = get_all_families()
        print(f"üîî Found {len(families)} families to check")
        
        if not families:
            print("üîî No families found in database")
            return
        
        for family_id in families:
            try:
                print(f"üîî Checking family {family_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∑–∞ 5 –º–∏–Ω—É—Ç)
                pre_conditions = check_pre_reminder_conditions(family_id)
                print(f"üîî Family {family_id} - pre_feeding: {pre_conditions['needs_pre_feeding']}, pre_diaper: {pre_conditions['needs_pre_diaper']}")
                
                if pre_conditions['needs_pre_feeding'] or pre_conditions['needs_pre_diaper']:
                    print(f"üîî Family {family_id} - needs pre-reminder!")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–æ
                    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –æ–±—ã—á–Ω—ã–µ –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    should_send_pre_feeding = (pre_conditions['needs_pre_feeding'] and 
                                             not check_recent_notification(family_id, 'pre_feeding', 5) and
                                             not check_recent_notification(family_id, 'regular_feeding', 10) and
                                             not check_recent_notification(family_id, 'overdue_feeding', 10))
                    should_send_pre_diaper = (pre_conditions['needs_pre_diaper'] and 
                                            not check_recent_notification(family_id, 'pre_diaper', 5) and
                                            not check_recent_notification(family_id, 'regular_diaper', 10) and
                                            not check_recent_notification(family_id, 'overdue_diaper', 10))
                    
                    if should_send_pre_feeding or should_send_pre_diaper:
                        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                        message = get_pre_reminder_message(family_id)
                        if message:
                            # –ü–æ–ª—É—á–∞–µ–º —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                            members = get_family_members_for_notification(family_id)
                            
                            if members:
                                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
                                buttons = []
                                if should_send_pre_feeding:
                                    buttons.append([Button.inline("üçº –û—Ç–º–µ—Ç–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ", b"feed_now")])
                                if should_send_pre_diaper:
                                    buttons.append([Button.inline("üí© –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞", b"diaper_now")])
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
                                for user_id in members:
                                    reminder_queue.append({
                                        'user_id': user_id,
                                        'message': message,
                                        'buttons': buttons,
                                        'notification_type': 'pre_feeding' if should_send_pre_feeding else 'pre_diaper',
                                        'family_id': family_id
                                    })
                                    print(f"üîî Added pre-reminder to queue for user {user_id}")
                                
                                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                                if should_send_pre_feeding:
                                    log_notification_sent(family_id, 'pre_feeding', get_thai_time())
                                if should_send_pre_diaper:
                                    log_notification_sent(family_id, 'pre_diaper', get_thai_time())
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏)
                overdue_conditions = check_overdue_reminder_conditions(family_id)
                print(f"üîî Family {family_id} - overdue_feeding: {overdue_conditions['needs_overdue_feeding']}, overdue_diaper: {overdue_conditions['needs_overdue_diaper']}")
                
                if overdue_conditions['needs_overdue_feeding'] or overdue_conditions['needs_overdue_diaper']:
                    print(f"üîî Family {family_id} - needs overdue reminder!")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–æ
                    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–ª–∏ –æ–±—ã—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    should_send_overdue_feeding = (overdue_conditions['needs_overdue_feeding'] and 
                                                 not check_recent_notification(family_id, 'overdue_feeding', 15) and
                                                 not check_recent_notification(family_id, 'pre_feeding', 10) and
                                                 not check_recent_notification(family_id, 'regular_feeding', 10))
                    should_send_overdue_diaper = (overdue_conditions['needs_overdue_diaper'] and 
                                                not check_recent_notification(family_id, 'overdue_diaper', 15) and
                                                not check_recent_notification(family_id, 'pre_diaper', 10) and
                                                not check_recent_notification(family_id, 'regular_diaper', 10))
                    
                    if should_send_overdue_feeding or should_send_overdue_diaper:
                        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                        message = get_overdue_reminder_message(family_id)
                        if message:
                            # –ü–æ–ª—É—á–∞–µ–º —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                            members = get_family_members_for_notification(family_id)
                            
                            if members:
                                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
                                buttons = []
                                if should_send_overdue_feeding:
                                    buttons.append([Button.inline("üçº –û—Ç–º–µ—Ç–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ", b"feed_now")])
                                if should_send_overdue_diaper:
                                    buttons.append([Button.inline("üí© –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞", b"diaper_now")])
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
                                for user_id in members:
                                    reminder_queue.append({
                                        'user_id': user_id,
                                        'message': message,
                                        'buttons': buttons,
                                        'notification_type': 'overdue_feeding' if should_send_overdue_feeding else 'overdue_diaper',
                                        'family_id': family_id
                                    })
                                    print(f"üîî Added overdue reminder to queue for user {user_id}")
                                
                                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                                if should_send_overdue_feeding:
                                    log_notification_sent(family_id, 'overdue_feeding', get_thai_time())
                                if should_send_overdue_diaper:
                                    log_notification_sent(family_id, 'overdue_diaper', get_thai_time())
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –ø—Ä–∏—à–ª–æ)
                conditions = check_smart_reminder_conditions(family_id)
                print(f"üîî Family {family_id} - needs_feeding: {conditions['needs_feeding']}, needs_diaper: {conditions['needs_diaper']}")
                
                if conditions['needs_feeding'] or conditions['needs_diaper']:
                    print(f"üîî Family {family_id} - needs regular reminder!")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ –æ–±—ã—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–æ
                    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    should_send_regular_feeding = (conditions['needs_feeding'] and 
                                                 not check_recent_notification(family_id, 'regular_feeding', 30) and
                                                 not check_recent_notification(family_id, 'pre_feeding', 10) and
                                                 not check_recent_notification(family_id, 'overdue_feeding', 10))
                    should_send_regular_diaper = (conditions['needs_diaper'] and 
                                                not check_recent_notification(family_id, 'regular_diaper', 30) and
                                                not check_recent_notification(family_id, 'pre_diaper', 10) and
                                                not check_recent_notification(family_id, 'overdue_diaper', 10))
                    
                    if should_send_regular_feeding or should_send_regular_diaper:
                        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                        message = get_smart_reminder_message(family_id)
                        if message:
                            # –ü–æ–ª—É—á–∞–µ–º —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                            members = get_family_members_for_notification(family_id)
                            
                            if members:
                                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
                                buttons = []
                                if should_send_regular_feeding:
                                    buttons.append([Button.inline("üçº –û—Ç–º–µ—Ç–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ", b"feed_now")])
                                if should_send_regular_diaper:
                                    buttons.append([Button.inline("üí© –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞", b"diaper_now")])
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
                                for user_id in members:
                                    reminder_queue.append({
                                        'user_id': user_id,
                                        'message': message,
                                        'buttons': buttons,
                                        'notification_type': 'regular_feeding' if should_send_regular_feeding else 'regular_diaper',
                                        'family_id': family_id
                                    })
                                    print(f"üîî Added regular reminder to queue for user {user_id}")
                                
                                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                                if should_send_regular_feeding:
                                    log_notification_sent(family_id, 'regular_feeding', get_thai_time())
                                if should_send_regular_diaper:
                                    log_notification_sent(family_id, 'regular_diaper', get_thai_time())
                
                print(f"‚úÖ All reminders checked for family {family_id}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ–º—å–∏ {family_id}: {e}")
                continue
                
    except Exception as e:
        print(f"‚ùå Critical error in smart reminders: {e}")

async def send_reminder_message(user_id: int, message: str, buttons: list):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    global telegram_client
    
    if not telegram_client:
        return
    
    try:
        await telegram_client.send_message(user_id, message, buttons=buttons)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def process_reminder_queue():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    global reminder_queue, telegram_client
    
    if not telegram_client or not reminder_queue:
        return
    
    print(f"üì§ Processing {len(reminder_queue)} reminders from queue...")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏
    while reminder_queue:
        reminder = reminder_queue.pop(0)
        try:
            await send_reminder_message(
                reminder['user_id'], 
                reminder['message'], 
                reminder['buttons']
            )
            print(f"‚úÖ Reminder sent to user {reminder['user_id']}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {reminder['user_id']}: {e}")

scheduler.add_job(keep_alive_ping, 'interval', minutes=5, id='keep_alive_ping')
print("‚è∞ Keep-alive ping scheduled every 5 minutes")

scheduler.add_job(send_smart_reminders, 'interval', minutes=5, id='smart_reminders')
print("‚è∞ Smart reminders scheduled every 5 minutes")

def process_reminder_queue_sync():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    global reminder_queue
    if reminder_queue:
        print(f"üì§ Found {len(reminder_queue)} reminders in queue")
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ –±–æ—Ç–∞

scheduler.add_job(process_reminder_queue_sync, 'interval', minutes=1, id='process_reminders')
print("‚è∞ Reminder queue processing scheduled every 1 minute")


scheduler.add_job(external_keep_alive, 'interval', minutes=3, id='external_keep_alive')
print("‚è∞ External keep-alive scheduled every 3 minutes")

def cleanup_notifications():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        print(f"üßπ Cleaning up old notifications: {time.strftime('%H:%M:%S')}")
        cleanup_old_notifications(7)  # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
        print("‚úÖ Old notifications cleaned up")
    except Exception as e:
        print(f"‚ùå Error cleaning up notifications: {e}")

scheduler.add_job(cleanup_notifications, 'interval', hours=24, id='cleanup_notifications')
print("‚è∞ Notification cleanup scheduled every 24 hours")

family_creation_pending = {}
manual_feeding_pending = {}
join_pending = {}
edit_pending = {}
edit_role_pending = {}
bath_pending = {}
activity_pending = {}
baby_birth_pending = {}
custom_time_pending = {}
duplicate_confirmation_pending = {}  # –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

def is_port_available(port):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –ø–æ—Ä—Ç"""
    import socket
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind(('', port))
            return True
    except OSError:
        return False

def start_health_server(port=8001):
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health checks"""
    class HealthHandler(http.server.BaseHTTPRequestHandler):
        def do_GET(self):
            if self.path == '/ping':
                self.send_response(200)
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                self.wfile.write(b'pong')
            else:
                self.send_response(404)
                self.end_headers()
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç
    for attempt in range(10):
        if is_port_available(port):
            try:
                with socketserver.TCPServer(("", port), HealthHandler) as httpd:
                    print(f"üè• Health server started on port {port}")
                    httpd.serve_forever()
                break
            except Exception as e:
                print(f"‚ùå Health server error on port {port}: {e}")
                port += 1
                continue
        else:
            print(f"‚ö†Ô∏è Port {port} is busy, trying port {port+1}...")
            port += 1
    else:
        print("‚ùå Could not find available port for health server")

async def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global telegram_client
    print("üöÄ –ó–∞–ø—É—Å–∫ BabyCareBot...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telegram
        print("üì± –°–æ–∑–¥–∞–µ–º Telegram –∫–ª–∏–µ–Ω—Ç...")
        client = TelegramClient('babybot', API_ID, API_HASH)
        
        print("üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...")
        await client.start(bot_token=BOT_TOKEN)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        me = await client.get_me()
        print(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{me.username} ({me.first_name})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        telegram_client = client
        print("‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}")
        return
    
    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await asyncio.sleep(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º health server –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    try:
        health_thread = threading.Thread(target=start_health_server, daemon=True)
        health_thread.start()
        print("‚úÖ Health server thread started")
    except Exception as e:
        print(f"‚ö†Ô∏è Health server not started: {e}")
        print("‚ÑπÔ∏è Bot will continue without health server")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.start()
    print("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    @client.on(events.NewMessage(pattern='/start'))
    async def start(event):
        uid = event.sender_id
        fid = get_family_id(uid)
        
        if fid:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–µ–º—å–µ
            family_name = get_family_name(fid)
            role, name = get_member_info(uid)
            
            welcome_message = (
                f"üë∂ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BabyCareBot!**\n\n"
                f"üè† **–í–∞—à–∞ —Å–µ–º—å—è:** {family_name}\n"
                f"üë§ **–í–∞—à–∞ —Ä–æ–ª—å:** {role} {name}\n\n"
                f"üí° –Ø –ø–æ–º–æ–≥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –º–∞–ª—ã—à–æ–º –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —É—Ö–æ–¥ –≤ —Å–µ–º—å–µ!\n\n"
                f"üìä **–î–∞—à–±–æ—Ä–¥:** https://bcb-db.vercel.app"
            )
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ–º—å–µ
            welcome_message = (
                f"üë∂ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BabyCareBot!**\n\n"
                f"üéØ **–ß—Ç–æ —è —É–º–µ—é:**\n"
                f"‚Ä¢ üçº –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è\n"
                f"‚Ä¢ üß∑ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–æ–≤\n"
                f"‚Ä¢ üõÅ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫—É–ø–∞–Ω–∏–∏ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)\n"
                f"‚Ä¢ üéÆ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∏–≥—Ä–∞—Ö –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)\n"
                f"‚Ä¢ üìä –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                f"‚Ä¢ ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö\n"
                f"‚Ä¢ üë• –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —É—Ö–æ–¥ –≤ —Å–µ–º—å–µ\n\n"
                f"üöÄ **–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:**\n"
                f"1Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ —Å–µ–º—å—é –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π\n"
                f"2Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∫–æ—Ä–º–ª–µ–Ω–∏—è –∏ —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–æ–≤\n"
                f"3Ô∏è‚É£ –ù–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–∞–ª—ã—à–∞\n\n"
                f"üìä **–î–∞—à–±–æ—Ä–¥:** https://bcb-db.vercel.app"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–µ–º—å—è
        uid = event.sender_id
        fid = get_family_id(uid)
        
        if fid:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–µ–º—å–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            buttons = [
                [Button.text("üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ"), Button.text("üí© –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞")],
                [Button.text("üí° –°–æ–≤–µ—Ç—ã"), Button.text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
            ]
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ–º—å–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è/–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            buttons = [
                [Button.text("üë®‚Äçüë©‚Äçüëß –°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é"), Button.text("üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è")]
            ]
        
        await event.respond(welcome_message, buttons=buttons)
    
    @client.on(events.NewMessage(pattern='üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ'))
    async def feeding_menu(event):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–º–ª–µ–Ω–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ—Ç–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ"""
        uid = event.sender_id
        fid = get_family_id(uid)
        
        if not fid:
            await event.respond("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–µ–º—å—é –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
        last_feeding = get_last_feeding_time_for_family(fid)
        
        if last_feeding:
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
            now = get_thai_time()
            time_diff = now - last_feeding
            hours = int(time_diff.total_seconds() // 3600)
            minutes = int((time_diff.total_seconds() % 3600) // 60)
            
            if hours > 0:
                time_str = f"{hours}—á {minutes}–º"
            else:
                time_str = f"{minutes}–º"
            
            # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –∂–∏–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
            if hours == 0 and minutes < 30:
                message = f"üçº **–ú–∞–ª—ã—à –Ω–µ–¥–∞–≤–Ω–æ –ø–æ–µ–ª!**\n**{time_str} –Ω–∞–∑–∞–¥**\n\n"
            elif hours == 0:
                message = f"üçº **–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –∫—É—à–∞–ª–∏:**\n**{time_str} –Ω–∞–∑–∞–¥**\n\n"
            elif hours < 2:
                message = f"üçº **–í –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –∫–æ—Ä–º–∏–ª–∏:**\n**{time_str} –Ω–∞–∑–∞–¥**\n\n"
            else:
                message = f"üçº **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ –±—ã–ª–æ:**\n**{time_str} –Ω–∞–∑–∞–¥**\n\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            feed_interval, _ = get_user_intervals(fid)
            
            if hours >= feed_interval:


                message += f"üçΩÔ∏è **–í—Ä–µ–º—è –æ–±–µ–¥–∞!** –ú–∞–ª—ã—à –ø—Ä–æ–≥–æ–ª–æ–¥–∞–ª—Å—è! (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {feed_interval}—á) ü•Ñ\n\n"
            else:
                # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
                total_minutes_passed = hours * 60 + minutes
                total_interval_minutes = feed_interval * 60
                remaining_minutes = total_interval_minutes - total_minutes_passed
                
                next_hours = remaining_minutes // 60
                next_minutes = remaining_minutes % 60
                
                if next_hours > 0:
                    next_time_str = f"{next_hours}—á {next_minutes}–º"
                else:
                    next_time_str = f"{next_minutes}–º"
                message += f"‚è∞ **–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è:**\n**{next_time_str}**\n\n"
        else:
            message = "üçº **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!** –ù–∞—á–Ω–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è –º–∞–ª—ã—à–∞! üë∂‚ú®\n\n"
        
        message += "üçº **–û—Ç–º–µ—Ç–∏—Ç—å –µ–¥—É:**"
        
        buttons = [
            [Button.inline("‚úÖ –°–µ–π—á–∞—Å", b"feed_now"), Button.inline("‚è∞ 15 –º–∏–Ω –Ω–∞–∑–∞–¥", b"feed_15min")],
            [Button.inline("‚è∞ 30 –º–∏–Ω –Ω–∞–∑–∞–¥", b"feed_30min"), Button.inline("üïê –£–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è", b"feed_custom_time")]
        ]
        
        await event.respond(message, buttons=buttons)
    
    @client.on(events.NewMessage(pattern='üí© –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞'))
    async def diaper_menu(event):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ—Ç–∏—Ç—å —Å–º–µ–Ω—É"""
        uid = event.sender_id
        fid = get_family_id(uid)
        
        if not fid:
            await event.respond("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–µ–º—å—é –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞
        last_diaper = get_last_diaper_change_time_for_family(fid)
        
        if last_diaper:
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–º–µ–Ω—ã
            now = get_thai_time()
            time_diff = now - last_diaper
            hours = int(time_diff.total_seconds() // 3600)
            minutes = int((time_diff.total_seconds() % 3600) // 60)
            
            if hours > 0:
                time_str = f"{hours}—á {minutes}–º"
            else:
                time_str = f"{minutes}–º"
            
            # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –∂–∏–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–æ–≤
            if hours == 0 and minutes < 30:
                message = f"üß∑ **–ü–æ–¥–≥—É–∑–Ω–∏–∫ —Å–≤–µ–∂–∏–π!**\n**{time_str} –Ω–∞–∑–∞–¥**\n\n"
            elif hours == 0:
                message = f"üß∑ **–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–º–µ–Ω–∞:**\n**{time_str} –Ω–∞–∑–∞–¥**\n\n"
            elif hours < 2:
                message = f"üß∑ **–í –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –º–µ–Ω—è–ª–∏:**\n**{time_str} –Ω–∞–∑–∞–¥**\n\n"
            else:
                message = f"üß∑ **–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–º–µ–Ω–∞ –±—ã–ª–∞:**\n**{time_str} –Ω–∞–∑–∞–¥**\n\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            _, diaper_interval = get_user_intervals(fid)
            
            if hours >= diaper_interval:
                message += f"üîÑ **–í—Ä–µ–º—è –º–µ–Ω—è—Ç—å!** –ú–∞–ª—ã—à—É –Ω—É–∂–µ–Ω —Å–≤–µ–∂–∏–π –ø–æ–¥–≥—É–∑–Ω–∏–∫! (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {diaper_interval}—á) üß¥\n\n"
            else:
                # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞
                total_minutes_passed = hours * 60 + minutes
                total_interval_minutes = diaper_interval * 60
                remaining_minutes = total_interval_minutes - total_minutes_passed
                
                next_hours = remaining_minutes // 60
                next_minutes = remaining_minutes % 60
                
                if next_hours > 0:
                    next_time_str = f"{next_hours}—á {next_minutes}–º"
                else:
                    next_time_str = f"{next_minutes}–º"
                message += f"‚è∞ **–î–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–º–µ–Ω—ã:**\n**{next_time_str}**\n\n"
        else:
            message = "üß∑ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!** –ù–∞—á–Ω–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–æ–≤! üë∂‚ú®\n\n"
        
        message += "üí© **–û—Ç–º–µ—Ç–∏—Ç—å —Å–º–µ–Ω—É –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞:**"
        
        buttons = [
            [Button.inline("‚úÖ –°–µ–π—á–∞—Å", b"diaper_now"), Button.inline("‚è∞ 15 –º–∏–Ω –Ω–∞–∑–∞–¥", b"diaper_15min")],
            [Button.inline("‚è∞ 30 –º–∏–Ω –Ω–∞–∑–∞–¥", b"diaper_30min"), Button.inline("üïê –£–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è", b"diaper_custom_time")]
        ]
        
        await event.respond(message, buttons=buttons)
    
    @client.on(events.NewMessage(pattern='üí° –°–æ–≤–µ—Ç—ã'))
    async def tips_menu(event):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç"""
        uid = event.sender_id
        fid = get_family_id(uid)
        
        if not fid:
            await event.respond("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–µ–º—å—é –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –º–∞–ª—ã—à–∞ –∏ —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç
        age_months = get_baby_age_months(fid)
        tip = get_random_tip(age_months)
        
        if tip:
            message = f"üí° **–°–æ–≤–µ—Ç –¥–ª—è {age_months} –º–µ—Å—è—Ü–µ–≤:**\n\n{tip}"
        else:
            message = "üí° –°–æ–≤–µ—Ç–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
        
        await event.respond(message)
    
    
    @client.on(events.NewMessage(pattern='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'))
    async def settings_menu(event):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        uid = event.sender_id
        fid = get_family_id(uid)
        
        if not fid:
            await event.respond("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–µ–º—å—é –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        settings = get_notification_settings(fid)
        intervals = get_user_intervals(fid)
        feeding_stats = get_feeding_stats(fid)
        diaper_stats = get_diaper_stats(fid)
        bath_stats = get_bath_stats(fid)
        activity_stats = get_activity_stats(fid)
        birth_date = get_birth_date(fid)
        
        message = "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        message += "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:**\n"
        if feeding_stats:
            message += f"üçº –ö–æ—Ä–º–ª–µ–Ω–∏—è: {feeding_stats['count']} —Ä–∞–∑\n"
        if diaper_stats:
            message += f"üí© –°–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–æ–≤: {diaper_stats['count']} —Ä–∞–∑\n"
        if bath_stats:
            message += f"üõÅ –ö—É–ø–∞–Ω–∏—è: {bath_stats['count']} —Ä–∞–∑\n"
        if activity_stats:
            message += f"üéÆ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_stats['count']} —Ä–∞–∑\n"
        
        message += "\n‚öôÔ∏è **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
        
        if intervals:
            feed_interval, diaper_interval = intervals
            message += f"üçº –ò–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è: {feed_interval}—á\n"
            message += f"üí© –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞: {diaper_interval}—á\n\n"
        
        if settings:
            message += f"üí° –°–æ–≤–µ—Ç—ã: {'–í–∫–ª—é—á–µ–Ω—ã' if settings.get('tips_enabled') else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
            message += f"üõÅ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫—É–ø–∞–Ω–∏–∏: {'–í–∫–ª—é—á–µ–Ω—ã' if settings.get('bath_reminder_enabled') else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
            message += f"üéÆ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {'–í–∫–ª—é—á–µ–Ω—ã' if settings.get('activity_reminder_enabled') else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
        
        if birth_date:
            message += f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –º–∞–ª—ã—à–∞: {birth_date}\n"
        else:
            message += f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –º–∞–ª—ã—à–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n"
        
        message += "\nüéØ **–ß—Ç–æ –Ω–∞—Å—Ç—Ä–æ–∏–º?**"
        
        buttons = [
            [Button.inline("üçº –ò–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è", b"settings_feeding"), Button.inline("üí© –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–¥–≥—É–∑–Ω–∏–∫–æ–≤", b"settings_diaper")],
            [Button.inline("üí° –°–æ–≤–µ—Ç—ã", b"settings_tips"), Button.inline("üõÅ –ö—É–ø–∞–Ω–∏–µ", b"settings_bath")],
            [Button.inline("üéÆ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", b"settings_activity"), Button.inline("‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", b"settings_time")],
            [Button.inline("üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", b"settings_birth_date"), Button.inline("üîô –ù–∞–∑–∞–¥", b"back_to_main")]
        ]
        
        await event.respond(message, buttons=buttons)
    
    @client.on(events.CallbackQuery)
    async def callback_handler(event):
        data = event.data.decode()
        uid = event.sender_id
        
        print(f"DEBUG: Callback data: {data} for user {uid}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–æ—Ä–º–ª–µ–Ω–∏—è
        if data == "feed_now":
            success, message = handle_feeding_callback(event, 0)
            if success:
                await event.edit(message)
            else:
                if isinstance(message, tuple):
                    await event.edit(message[0], buttons=message[1])
                else:
                    await event.edit(message)
        
        elif data == "feed_15min":
            success, message = handle_feeding_callback(event, 15)
            if success:
                await event.edit(message)
            else:
                if isinstance(message, tuple):
                    await event.edit(message[0], buttons=message[1])
                else:
                    await event.edit(message)
        
        elif data == "feed_30min":
            success, message = handle_feeding_callback(event, 30)
            if success:
                await event.edit(message)
            else:
                if isinstance(message, tuple):
                    await event.edit(message[0], buttons=message[1])
                else:
                    await event.edit(message)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞
        elif data == "diaper_now":
            success, message = handle_diaper_callback(event, 0)
            if success:
                await event.edit(message)
            else:
                if isinstance(message, tuple):
                    await event.edit(message[0], buttons=message[1])
                else:
                    await event.edit(message)
        
        elif data == "diaper_15min":
            success, message = handle_diaper_callback(event, 15)
            if success:
                await event.edit(message)
            else:
                if isinstance(message, tuple):
                    await event.edit(message[0], buttons=message[1])
                else:
                    await event.edit(message)
        
        elif data == "diaper_30min":
            success, message = handle_diaper_callback(event, 30)
            if success:
                await event.edit(message)
            else:
                if isinstance(message, tuple):
                    await event.edit(message[0], buttons=message[1])
                else:
                    await event.edit(message)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        elif data == "confirm_duplicate":
            if uid in duplicate_confirmation_pending:
                pending_data = duplicate_confirmation_pending[uid]
                action = pending_data["action"]
                minutes_ago = pending_data["minutes_ago"]
                
                if action == "feeding":
                    if add_feeding(uid, minutes_ago, force=True):
                        fid = get_family_id(uid)
                        if fid:
                            acknowledge_feeding_notifications(fid)
                        await event.edit("‚úÖ –ö–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ!")
                    else:
                        await event.edit("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è")
                elif action == "diaper":
                    if add_diaper_change(uid, minutes_ago, force=True):
                        fid = get_family_id(uid)
                        if fid:
                            acknowledge_diaper_notifications(fid)
                        await event.edit("‚úÖ –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!")
                    else:
                        await event.edit("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞")
                
                del duplicate_confirmation_pending[uid]
            else:
                await event.edit("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        elif data == "cancel_duplicate":
            if uid in duplicate_confirmation_pending:
                del duplicate_confirmation_pending[uid]
                await event.edit("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            else:
                await event.edit("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        elif data == "back_to_main":
            fid = get_family_id(uid)
            if fid:
                family_name = get_family_name(fid)
                role, name = get_member_info(uid)
                
                message = (
                    f"üë∂ **BabyCareBot**\n\n"
                    f"üè† **–°–µ–º—å—è:** {family_name}\n"
                    f"üë§ **–†–æ–ª—å:** {role} {name}\n\n"
                    f"üéØ **–ß—Ç–æ –¥–µ–ª–∞–µ–º?**"
                )
            else:
                message = (
                    f"üë∂ **BabyCareBot**\n\n"
                    f"üéØ **–ß—Ç–æ –¥–µ–ª–∞–µ–º?**"
                )
            
            buttons = [
                [Button.text("üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ"), Button.text("üí© –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞")],
                [Button.text("üí° –°–æ–≤–µ—Ç—ã"), Button.text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
            ]
            
            await event.edit(message, buttons=buttons)
        
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–£–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è"
        elif data == "feed_custom_time":
            custom_time_pending[uid] = "feeding"
            await event.edit("üïê **–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∫–æ—Ä–º–ª–µ–Ω–∏—è**\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n‚Ä¢ **15** (15 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥)\n‚Ä¢ **1:30** (1 —á–∞—Å 30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥)\n‚Ä¢ **2—á** (2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥)")
        
        elif data == "diaper_custom_time":
            custom_time_pending[uid] = "diaper"
            await event.edit("üïê **–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞**\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n‚Ä¢ **15** (15 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥)\n‚Ä¢ **1:30** (1 —á–∞—Å 30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥)\n‚Ä¢ **2—á** (2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥)")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        elif data == "settings_feeding":
            fid = get_family_id(uid)
            if fid:
                intervals = get_user_intervals(fid)
                current_interval = intervals[0] if intervals else 3
                
                message = f"üçº **–ò–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è:** {current_interval} —á–∞—Å–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:"
                
                buttons = [
                    [Button.inline("3 —á–∞—Å–∞", b"set_feed_3"), Button.inline("4 —á–∞—Å–∞", b"set_feed_4")],
                    [Button.inline("5 —á–∞—Å–æ–≤", b"set_feed_5"), Button.inline("6 —á–∞—Å–æ–≤", b"set_feed_6")],
                    [Button.inline("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", b"back_to_settings")]
                ]
                
                await event.edit(message, buttons=buttons)
            else:
                await event.edit("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        elif data == "settings_diaper":
            fid = get_family_id(uid)
            if fid:
                intervals = get_user_intervals(fid)
                current_interval = intervals[1] if intervals else 2
                
                message = f"üí© **–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞:** {current_interval} —á–∞—Å–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:"
                
                buttons = [
                    [Button.inline("2 —á–∞—Å–∞", b"set_diaper_2"), Button.inline("3 —á–∞—Å–∞", b"set_diaper_3")],
                    [Button.inline("4 —á–∞—Å–∞", b"set_diaper_4"), Button.inline("5 —á–∞—Å–æ–≤", b"set_diaper_5")],
                    [Button.inline("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", b"back_to_settings")]
                ]
                
                await event.edit(message, buttons=buttons)
            else:
                await event.edit("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        elif data == "settings_tips":
            fid = get_family_id(uid)
            if fid:
                settings = get_notification_settings(fid)
                tips_enabled = settings.get('tips_enabled', True) if settings else True
                
                message = f"üí° **–°–æ–≤–µ—Ç—ã:** {'–í–∫–ª—é—á–µ–Ω—ã' if tips_enabled else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n\nüéØ **–ß—Ç–æ –¥–µ–ª–∞–µ–º?**"
                
                buttons = [
                    [Button.inline("‚úÖ –í–∫–ª—é—á–∏—Ç—å", b"toggle_tips_on"), Button.inline("‚ùå –í—ã–∫–ª—é—á–∏—Ç—å", b"toggle_tips_off")],
                    [Button.inline("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", b"back_to_settings")]
                ]
                
                await event.edit(message, buttons=buttons)
            else:
                await event.edit("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        elif data == "settings_bath":
            fid = get_family_id(uid)
            if fid:
                settings = get_notification_settings(fid)
                bath_enabled = settings.get('bath_reminder_enabled', True) if settings else True
                
                message = f"üõÅ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫—É–ø–∞–Ω–∏–∏:** {'–í–∫–ª—é—á–µ–Ω—ã' if bath_enabled else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n\nüéØ **–ß—Ç–æ –¥–µ–ª–∞–µ–º?**"
                
                buttons = [
                    [Button.inline("‚úÖ –í–∫–ª—é—á–∏—Ç—å", b"toggle_bath_on"), Button.inline("‚ùå –í—ã–∫–ª—é—á–∏—Ç—å", b"toggle_bath_off")],
                    [Button.inline("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", b"back_to_settings")]
                ]
                
                await event.edit(message, buttons=buttons)
            else:
                await event.edit("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        elif data == "settings_activity":
            fid = get_family_id(uid)
            if fid:
                settings = get_notification_settings(fid)
                activity_enabled = settings.get('activity_reminder_enabled', True) if settings else True
                
                message = f"üéÆ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:** {'–í–∫–ª—é—á–µ–Ω—ã' if activity_enabled else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n\nüéØ **–ß—Ç–æ –¥–µ–ª–∞–µ–º?**"
                
                buttons = [
                    [Button.inline("‚úÖ –í–∫–ª—é—á–∏—Ç—å", b"toggle_activity_on"), Button.inline("‚ùå –í—ã–∫–ª—é—á–∏—Ç—å", b"toggle_activity_off")],
                    [Button.inline("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", b"back_to_settings")]
                ]
                
                await event.edit(message, buttons=buttons)
            else:
                await event.edit("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        elif data == "settings_time":
            fid = get_family_id(uid)
            if fid:
                settings = get_notification_settings(fid)
                tips_hour = settings.get('tips_time_hour', 9)
                tips_minute = settings.get('tips_time_minute', 0)
                bath_hour = settings.get('bath_reminder_hour', 19)
                bath_minute = settings.get('bath_reminder_minute', 0)
                activity_interval = settings.get('activity_reminder_interval', 2)
                
                message = f"‚è∞ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**\n\n"
                message += f"üí° **–°–æ–≤–µ—Ç—ã:** {tips_hour:02d}:{tips_minute:02d}\n"
                message += f"üõÅ **–ö—É–ø–∞–Ω–∏–µ:** {bath_hour:02d}:{bath_minute:02d}\n"
                message += f"üéÆ **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** –∫–∞–∂–¥—ã–µ {activity_interval}—á\n\n"
                message += f"üéØ **–ß—Ç–æ –Ω–∞—Å—Ç—Ä–æ–∏–º?**"
                
                buttons = [
                    [Button.inline("üí° –í—Ä–µ–º—è —Å–æ–≤–µ—Ç–æ–≤", b"set_tips_time"), Button.inline("üõÅ –í—Ä–µ–º—è –∫—É–ø–∞–Ω–∏—è", b"set_bath_time")],
                    [Button.inline("üéÆ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", b"set_activity_interval")],
                    [Button.inline("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", b"back_to_settings")]
                ]
                
                await event.edit(message, buttons=buttons)
            else:
                await event.edit("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        elif data == "settings_birth_date":
            fid = get_family_id(uid)
            if fid:
                birth_date = get_birth_date(fid)
                
                message = f"üìÖ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –º–∞–ª—ã—à–∞:**\n\n"
                if birth_date:
                    message += f"üìÖ **–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞:** {birth_date}\n\n"
                else:
                    message += f"üìÖ **–î–∞—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞**\n\n"
                
                message += f"üéØ **–ß—Ç–æ –¥–µ–ª–∞–µ–º?**"
                
                buttons = [
                    [Button.inline("üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É", b"set_birth_date")],
                    [Button.inline("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", b"back_to_settings")]
                ]
                
                await event.edit(message, buttons=buttons)
            else:
                await event.edit("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        elif data.startswith("set_feed_"):
            interval = int(data.split("_")[2])
            fid = get_family_id(uid)
            if fid and set_user_interval(fid, interval, None):
                await event.edit(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {interval} —á–∞—Å–æ–≤!")
            else:
                await event.edit("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞")
        
        elif data.startswith("set_diaper_"):
            interval = int(data.split("_")[2])
            fid = get_family_id(uid)
            if fid and set_user_interval(fid, None, interval):
                await event.edit(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {interval} —á–∞—Å–æ–≤!")
            else:
                await event.edit("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞")
        
        elif data.startswith("set_activity_"):
            interval = int(data.split("_")[2])
            fid = get_family_id(uid)
            if fid and update_notification_settings(fid, {"activity_reminder_interval": interval}):
                await event.edit(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {interval} —á–∞—Å–æ–≤!")
            else:
                await event.edit("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        elif data == "set_tips_time":
            custom_time_pending[uid] = "tips_time"
            await event.edit("üí° **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–≤–µ—Ç–æ–≤**\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n‚Ä¢ **9:00** (9 —á–∞—Å–æ–≤ 0 –º–∏–Ω—É—Ç)\n‚Ä¢ **14:30** (14 —á–∞—Å–æ–≤ 30 –º–∏–Ω—É—Ç)\n‚Ä¢ **21** (21 —á–∞—Å 0 –º–∏–Ω—É—Ç)")
        
        elif data == "set_bath_time":
            custom_time_pending[uid] = "bath_time"
            await event.edit("üõÅ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∫—É–ø–∞–Ω–∏—è**\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n‚Ä¢ **19:00** (19 —á–∞—Å–æ–≤ 0 –º–∏–Ω—É—Ç)\n‚Ä¢ **20:30** (20 —á–∞—Å–æ–≤ 30 –º–∏–Ω—É—Ç)\n‚Ä¢ **21** (21 —á–∞—Å 0 –º–∏–Ω—É—Ç)")
        
        elif data == "set_activity_interval":
            fid = get_family_id(uid)
            if fid:
                settings = get_notification_settings(fid)
                current_interval = settings.get('activity_reminder_interval', 2)
                
                message = f"üéÆ **–ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:** {current_interval} —á–∞—Å–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:"
                
                buttons = [
                    [Button.inline("1 —á–∞—Å", b"set_activity_1"), Button.inline("2 —á–∞—Å–∞", b"set_activity_2")],
                    [Button.inline("3 —á–∞—Å–∞", b"set_activity_3"), Button.inline("4 —á–∞—Å–∞", b"set_activity_4")],
                    [Button.inline("üîô –ù–∞–∑–∞–¥ –∫ –≤—Ä–µ–º–µ–Ω–∏", b"settings_time")]
                ]
                
                await event.edit(message, buttons=buttons)
            else:
                await event.edit("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        elif data == "set_birth_date":
            baby_birth_pending[uid] = True
            await event.edit("üìÖ **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –º–∞–ª—ã—à–∞**\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n‚Ä¢ **2024-01-15** (15 —è–Ω–≤–∞—Ä—è 2024)\n‚Ä¢ **15.01.2024** (15 —è–Ω–≤–∞—Ä—è 2024)\n‚Ä¢ **15/01/2024** (15 —è–Ω–≤–∞—Ä—è 2024)")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        elif data == "toggle_tips_on":
            fid = get_family_id(uid)
            if fid and update_notification_settings(fid, {"tips_enabled": True}):
                await event.edit("‚úÖ –°–æ–≤–µ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã!")
            else:
                await event.edit("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        elif data == "toggle_tips_off":
            fid = get_family_id(uid)
            if fid and update_notification_settings(fid, {"tips_enabled": False}):
                await event.edit("‚úÖ –°–æ–≤–µ—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã!")
            else:
                await event.edit("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        elif data == "toggle_bath_on":
            fid = get_family_id(uid)
            if fid and update_notification_settings(fid, {"bath_reminder_enabled": True}):
                await event.edit("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫—É–ø–∞–Ω–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã!")
            else:
                await event.edit("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        elif data == "toggle_bath_off":
            fid = get_family_id(uid)
            if fid and update_notification_settings(fid, {"bath_reminder_enabled": False}):
                await event.edit("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫—É–ø–∞–Ω–∏–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã!")
            else:
                await event.edit("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        elif data == "toggle_activity_on":
            fid = get_family_id(uid)
            if fid and update_notification_settings(fid, {"activity_reminder_enabled": True}):
                await event.edit("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∫–ª—é—á–µ–Ω—ã!")
            else:
                await event.edit("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        elif data == "toggle_activity_off":
            fid = get_family_id(uid)
            if fid and update_notification_settings(fid, {"activity_reminder_enabled": False}):
                await event.edit("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã!")
            else:
                await event.edit("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞" –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        elif data == "check_reminders":
            fid = get_family_id(uid)
            if fid:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                conditions = check_smart_reminder_conditions(fid)
                
                if not conditions['needs_feeding'] and not conditions['needs_diaper']:
                    message = "‚úÖ **–í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ!**\n\n"
                    message += "üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ –∏ —Å–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\n"
                    message += "üí° –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"
                    
                    buttons = [
                        [Button.inline("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", b"check_reminders")]
                    ]
                else:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    message = get_smart_reminder_message(fid)
                    if not message:
                        message = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
                        buttons = []
                    else:
                        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
                        buttons = []
                        if conditions['needs_feeding']:
                            buttons.append([Button.inline("üçº –û—Ç–º–µ—Ç–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ", b"feed_now")])
                        if conditions['needs_diaper']:
                            buttons.append([Button.inline("üí© –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞", b"diaper_now")])
                        buttons.append([Button.inline("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", b"check_reminders")])
                
                await event.edit(message, buttons=buttons)
            else:
                await event.edit("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"
        elif data == "back_to_settings":
            fid = get_family_id(uid)
            if fid:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                settings = get_notification_settings(fid)
                intervals = get_user_intervals(fid)
                feeding_stats = get_feeding_stats(fid)
                diaper_stats = get_diaper_stats(fid)
                bath_stats = get_bath_stats(fid)
                activity_stats = get_activity_stats(fid)
                birth_date = get_birth_date(fid)
                
                message = "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                message += "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:**\n"
                if feeding_stats:
                    message += f"üçº –ö–æ—Ä–º–ª–µ–Ω–∏—è: {feeding_stats['count']} —Ä–∞–∑\n"
                if diaper_stats:
                    message += f"üí© –°–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–æ–≤: {diaper_stats['count']} —Ä–∞–∑\n"
                if bath_stats:
                    message += f"üõÅ –ö—É–ø–∞–Ω–∏—è: {bath_stats['count']} —Ä–∞–∑\n"
                if activity_stats:
                    message += f"üéÆ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_stats['count']} —Ä–∞–∑\n"
                
                message += "\n‚öôÔ∏è **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
                
                if intervals:
                    feed_interval, diaper_interval = intervals
                    message += f"üçº –ò–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è: {feed_interval}—á\n"
                    message += f"üí© –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞: {diaper_interval}—á\n\n"
                
                if settings:
                    message += f"üí° –°–æ–≤–µ—Ç—ã: {'–í–∫–ª—é—á–µ–Ω—ã' if settings.get('tips_enabled') else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
                    message += f"üõÅ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫—É–ø–∞–Ω–∏–∏: {'–í–∫–ª—é—á–µ–Ω—ã' if settings.get('bath_reminder_enabled') else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
                    message += f"üéÆ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {'–í–∫–ª—é—á–µ–Ω—ã' if settings.get('activity_reminder_enabled') else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
                
                if birth_date:
                    message += f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –º–∞–ª—ã—à–∞: {birth_date}\n"
                else:
                    message += f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –º–∞–ª—ã—à–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n"
                
                message += "\nüéØ **–ß—Ç–æ –Ω–∞—Å—Ç—Ä–æ–∏–º?**"
                
                buttons = [
                    [Button.inline("üçº –ò–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è", b"settings_feeding"), Button.inline("üí© –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–¥–≥—É–∑–Ω–∏–∫–æ–≤", b"settings_diaper")],
                    [Button.inline("üí° –°–æ–≤–µ—Ç—ã", b"settings_tips"), Button.inline("üõÅ –ö—É–ø–∞–Ω–∏–µ", b"settings_bath")],
                    [Button.inline("üéÆ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", b"settings_activity"), Button.inline("‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", b"settings_time")],
                    [Button.inline("üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", b"settings_birth_date"), Button.inline("üîô –ù–∞–∑–∞–¥", b"back_to_main")]
                ]
                
                await event.edit(message, buttons=buttons)
            else:
                await event.edit("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        else:
            await event.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    
    @client.on(events.NewMessage)
    async def handle_text(event):
        uid = event.sender_id
        text = event.text.strip()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏
        if uid in family_creation_pending:
            family_name = text
            family_id = create_family(family_name, uid)
            
            if family_id:
                del family_creation_pending[uid]
                await event.respond(f"‚úÖ –°–µ–º—å—è '{family_name}' —Å–æ–∑–¥–∞–Ω–∞! ID —Å–µ–º—å–∏: {family_id}")
            else:
                await event.respond("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏")
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–µ–º—å–µ
        if uid in join_pending:
            family_id, family_name = join_family_by_code(text, uid)
            
            if family_id:
                del join_pending[uid]
                await event.respond(f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–µ–º—å–µ '{family_name}'!")
            else:
                await event.respond(f"‚ùå {family_name}")
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
        if uid in custom_time_pending:
            action = custom_time_pending[uid]
            del custom_time_pending[uid]
            
            if action in ["feeding", "diaper"]:
                minutes_ago = parse_time_input(text)
                if minutes_ago is None:
                    await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    return
                
                if action == "feeding":
                    success, message = handle_feeding_callback(event, minutes_ago)
                    if success:
                        await event.respond(message)
                    else:
                        if isinstance(message, tuple):
                            await event.respond(message[0], buttons=message[1])
                        else:
                            await event.respond(message)
                elif action == "diaper":
                    success, message = handle_diaper_callback(event, minutes_ago)
                    if success:
                        await event.respond(message)
                    else:
                        if isinstance(message, tuple):
                            await event.respond(message[0], buttons=message[1])
                        else:
                            await event.respond(message)
            
            elif action in ["tips_time", "bath_time"]:
                # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
                time_tuple = parse_time_setting(text)
                if time_tuple is None:
                    await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    return
                
                hours, minutes = time_tuple
                fid = get_family_id(uid)
                
                if action == "tips_time":
                    if fid and update_notification_settings(fid, {"tips_time_hour": hours, "tips_time_minute": minutes}):
                        await event.respond(f"‚úÖ –í—Ä–µ–º—è —Å–æ–≤–µ—Ç–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {hours:02d}:{minutes:02d}!")
                    else:
                        await event.respond("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏")
                elif action == "bath_time":
                    if fid and update_notification_settings(fid, {"bath_reminder_hour": hours, "bath_reminder_minute": minutes}):
                        await event.respond(f"‚úÖ –í—Ä–µ–º—è –∫—É–ø–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {hours:02d}:{minutes:02d}!")
                    else:
                        await event.respond("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏")
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
        if uid in baby_birth_pending:
            del baby_birth_pending[uid]
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
            birth_date = parse_birth_date(text)
            if birth_date is None:
                await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n‚Ä¢ **2024-01-15**\n‚Ä¢ **15.01.2024**\n‚Ä¢ **15/01/2024**")
                return
            
            fid = get_family_id(uid)
            if fid and set_birth_date(fid, birth_date):
                await event.respond(f"‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {birth_date}")
            else:
                await event.respond("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è")
            return
        
        if text == "üë®‚Äçüë©‚Äçüëß –°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é":
            family_creation_pending[uid] = True
            await event.respond("üë®‚Äçüë©‚Äçüëß –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ–º—å–∏:")
        
        elif text == "üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è":
            join_pending[uid] = True
            await event.respond("üîó –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–µ–º—å–∏ (ID —Å–µ–º—å–∏):")
        
        elif text == "üí° –°–æ–≤–µ—Ç":
            fid = get_family_id(uid)
            if fid:
                age_months = get_baby_age_months(fid)
                tip = get_random_tip(age_months)
                if tip:
                    await event.respond(f"üí° **–°–æ–≤–µ—Ç –¥–ª—è {age_months} –º–µ—Å—è—Ü–µ–≤:**\n\n{tip}")
                else:
                    await event.respond("üí° –°–æ–≤–µ—Ç–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç")
            else:
                await event.respond("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ")
        
        elif text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            fid = get_family_id(uid)
            if fid:
                message = "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\nüéØ **–ß—Ç–æ –Ω–∞—Å—Ç—Ä–æ–∏–º?**"
                buttons = [
                    [Button.text("üçº –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –∫–æ—Ä–º–ª–µ–Ω–∏—è"), Button.text("üß∑ –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–æ–≤")],
                    [Button.text("üë§ –ú–æ—è —Ä–æ–ª—å"), Button.text("üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è")],
                    [Button.text("üîô –ù–∞–∑–∞–¥")]
                ]
                await event.respond(message, buttons=buttons)
            else:
                await event.respond("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ")
        
        
        elif text == "üë®‚Äçüë©‚Äçüëß –°–µ–º—å—è":
            fid = get_family_id(uid)
            if fid:
                family_name = get_family_name(fid)
                members = get_family_members_with_roles(fid)
                
                message = f"üë®‚Äçüë©‚Äçüëß **–°–µ–º—å—è: {family_name}**\n\n"
                message += f"üë• **–ß–ª–µ–Ω—ã —Å–µ–º—å–∏:**\n"
                
                for user_id, role, name in members:
                    if user_id == uid:
                        message += f"‚Ä¢ {role} {name} (–≤—ã)\n"
                    else:
                        message += f"‚Ä¢ {role} {name}\n"
                
                message += f"\nüîë **ID —Å–µ–º—å–∏:** {fid}\n"
                message += f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º ID —Å –¥—Ä—É–≥–∏–º–∏ —á–ª–µ–Ω–∞–º–∏ —Å–µ–º—å–∏"
                
                buttons = [[Button.text("üîô –ù–∞–∑–∞–¥")]]
                await event.respond(message, buttons=buttons)
            else:
                await event.respond("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ")
        
        
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—á–µ—Ä–µ–¥–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    try:
        print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        async def reminder_processor():
            while True:
                await process_reminder_queue()
                await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(reminder_processor())
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
        
        print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞...")
        await client.run_until_disconnected()
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
    finally:
        # Graceful shutdown
        print("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
        scheduler.shutdown()
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üëã BabyCareBot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    try:
        asyncio.run(start_bot())
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
